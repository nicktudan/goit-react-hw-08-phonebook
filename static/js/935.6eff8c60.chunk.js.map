{"version":3,"file":"static/js/935.6eff8c60.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.style.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFiltredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from \"styled-components\";\nimport { \n    Form as FormikForm,\n    Field as FormikField,\n    ErrorMessage as FormikError, \n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n    display: flex;\n    flex-direction: column;\n    margin-top: 28px;\n    margin-bottom: 28px;\n    padding: 20px 130px 20px 20px;\n    border: 2px solid black;\n    \n`;\n\nexport const Field = styled(FormikField)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 8px;\n    margin-bottom: 8px;\n    padding: 4px 8px;\n    border: 1px solid #D3D3D3;\n    outline: none;\n    transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n\n    ::placeholder {\n        color: #708090;\n        font-size: 16px;\n    }\n\n    :hover,\n    :focus {\n        border-radius: 2px;\n        border: 2px solid #00BFFF;\n        box-shadow: rgba(30, 144, 255, 0.3) 1px 1px 2px 0px, rgba(30, 144, 255, 0.15) 2px 2px 6px 1px;\n    }\n`;\n\nexport const FormBtn = styled.button`\n    max-width: 120px;\n    margin: 16px 8px 0px 0px;\n    padding: 4px 0 4px 0;\n    border: 1px solid #D3D3D3;\n    border-radius: 4px;\n    font-family: SFProText-Regular, Helvetica, Arial, sans-serif;\n    font-size: 16px;\n    line-height: 1.2;\n    background-color: #ffffff;\n    color: #000000;\n    cursor: pointer;\n\n    :hover,\n    :focus {\n        background-color: #B0E0E6;\n    }\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n    margin-bottom: 12px;\n    font-size: 14px;\n    font-style: italic;\n    color: #DC143C;\n`;","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport { Form, Field, FormBtn, ErrorMessage } from './ContactForm.styled';\n\nconst ContactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore dArtagnan'\n    )\n    .required('Required'),\n  number: yup\n    .string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (newContact, { resetForm }) => {\n    const isExist = contacts.some(\n      contact =>\n        (contact.name.toLowerCase() === newContact.name.toLowerCase() &&\n          contact.number === newContact.number) ||\n        contact.number === newContact.number\n    );\n    if (isExist) {\n      alert(\n        `${newContact.name} or ${newContact.number} is already in contacts.`\n      );\n    } else {\n      dispatch(addContact(newContact));\n      resetForm({\n        name: '',\n        number: '',\n      });\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={ContactSchema}\n      onSubmit={(newContact, actions) => {\n        handleSubmit(newContact, actions);\n      }}\n    >\n      <Form>\n        <label>\n          Name\n          <Field type=\"text\" name=\"name\" placeholder=\"enter a name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </label>\n        <label>\n          Number\n          <Field type=\"tel\" name=\"number\" placeholder=\"enter the phone number\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </label>\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ContactsList = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    margin-left: 64px;\n`;\n\nexport const ContactListItems = styled.li`\n    list-style: disc;\n`;\n\nexport const ContactListItemsData = styled.span`\n    :not(:first-child) {\n    padding-left: 8px;\n    padding-right: 16px;\n}\n`;\n\nexport const ContactListItemsBtn = styled.button`\n    font-size: 12px;\n    font-weight: 600;\n    padding: 2px 12px;\n    border: 1px solid #D3D3D3;\n    border-radius: 4px;\n    background-color: #ffffff;\n    color: #000000;\n    cursor: pointer;\n\n    :hover,\n    :focus {\n        background-color: #B0E0E6;\n    }\n`;","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport {\n  ContactListItems,\n  ContactListItemsData,\n  ContactListItemsBtn,\n} from './ContactList.styled';\n\nexport const ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactListItems>\n      <ContactListItemsData>{name}:</ContactListItemsData>\n      <ContactListItemsData>{number}</ContactListItemsData>\n      <ContactListItemsBtn type=\"button\" onClick={handleDelete}>\n        Delete\n      </ContactListItemsBtn>\n    </ContactListItems>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { selectFiltredContacts } from 'redux/contacts/selectors';\n\nimport { ContactListItem } from './ContactListItem';\n\nimport { ContactsList } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFiltredContacts);\n\n  return (\n    <ContactsList>\n      {contacts.length > 0 &&\n        contacts.map(contact => {\n          return (\n            <ContactListItem\n              key={contact.id}\n              name={contact.name}\n              number={contact.number}\n              id={contact.id}\n            />\n          );\n        })}\n    </ContactsList>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FilterContainer = styled.div`\n    margin-top: 28px;\n    margin-bottom: 28px;\n`;\n\nexport const FilterInput = styled.input`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 8px;\n    padding: 4px 8px;\n    border: 1px solid #D3D3D3;\n    outline: none;\n    transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    :hover,\n    :focus {\n        border-radius: 2px;\n        border: 2px solid #00BFFF;\n        box-shadow: rgba(30, 144, 255, 0.3) 0px 1px 2px 0px, rgba(30, 144, 255, 0.15) 0px 2px 6px 2px;\n    }\n`;\n\nexport const FilterLabel = styled.label`\n    font-size: 32px;\n`;","import { useDispatch } from 'react-redux';\n\nimport { filterText } from 'redux/contacts/filterSlice';\n\nimport { FilterInput, FilterContainer, FilterLabel } from './Filter.style';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <FilterContainer>\n      <FilterLabel>Find contacts by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        onChange={event => dispatch(filterText(event.target.value))}\n      />\n    </FilterContainer>\n  );\n};\n","import styled from 'styled-components';\n\n\nexport const TitlePhonebook = styled.h2`\n  font-size: 56px;\n`;\n\nexport const TitleContacts = styled.h3`\n  font-size: 48px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nimport { ContactForm } from '..//../components/ContactForm/ContactForm';\nimport { ContactList } from '..//../components/ContactList/ContactList';\nimport { Filter } from '..//../components/Filter/Filter';\nimport { Loader } from '..//../components/Loader/Loader';\n\nimport { TitlePhonebook, TitleContacts } from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <TitlePhonebook>Phonebook</TitlePhonebook>\n      <ContactForm />\n      <TitleContacts>Contacts</TitleContacts>\n      <Filter />\n      {isLoading && <Loader />}\n      <ContactList />\n    </>\n  );\n};\n\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFiltredContacts","createSelector","filter","contact","name","toLowerCase","includes","Form","styled","FormikForm","Field","FormikField","FormBtn","ErrorMessage","FormikError","ContactSchema","yup","shape","trim","matches","required","number","initialValues","ContactForm","useSelector","dispatch","useDispatch","validationSchema","onSubmit","newContact","actions","resetForm","some","alert","addContact","handleSubmit","type","placeholder","component","ContactsList","ContactListItems","ContactListItemsData","ContactListItemsBtn","ContactListItem","id","onClick","deleteContact","ContactList","length","map","FilterContainer","FilterInput","FilterLabel","Filter","onChange","event","filterText","target","value","TitlePhonebook","TitleContacts","useEffect","fetchContacts","Loader"],"sourceRoot":""}